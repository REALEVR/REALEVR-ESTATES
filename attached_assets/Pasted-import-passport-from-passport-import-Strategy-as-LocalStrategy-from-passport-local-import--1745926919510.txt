import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import { Express } from "express";
import session from "express-session";
import { scrypt, randomBytes, timingSafeEqual } from "crypto";
import { promisify } from "util";
import { storage } from "./storage";
import { User as SelectUser } from "@shared/schema";

declare global {
  namespace Express {
    interface User extends SelectUser {}
  }
}

const scryptAsync = promisify(scrypt);

async function hashPassword(password: string) {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

async function comparePasswords(supplied: string, stored: string) {
  const [hashed, salt] = stored.split(".");
  const hashedBuf = Buffer.from(hashed, "hex");
  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
  return timingSafeEqual(hashedBuf, suppliedBuf);
}

export function setupAuth(app: Express) {
  // Skip session setup completely when running locally in VS Code
  // This is for development purposes only and should not be used in production
  if (process.env.NODE_ENV !== 'production' && !process.env.SESSION_SECRET) {
    console.log("Skipping session authentication setup for local development.");
    
    // Add mock routes to prevent errors
    app.post("/api/register", (req, res) => {
      res.status(201).json({ id: 1, username: "dev_user", email: "dev@example.com" });
    });
    
    app.post("/api/login", (req, res) => {
      res.status(200).json({ id: 1, username: "dev_user", email: "dev@example.com" });
    });
    
    app.post("/api/logout", (req, res) => {
      res.sendStatus(200);
    });
    
    app.get("/api/user", (req, res) => {
      res.status(200).json({ id: 1, username: "dev_user", email: "dev@example.com" });
    });
    
    return; // Skip the rest of the auth setup
  }

  // Normal authentication setup for when SESSION_SECRET is available
  const sessionSecret = process.env.SESSION_SECRET || "realevr-dev-secret-key-for-offline-use-only";
  
  const sessionSettings: session.SessionOptions = {
    secret: sessionSecret,
    resave: false,
    saveUninitialized: false,
    cookie: {
      secure: process.env.NODE_ENV === "production",
      maxAge: 1000 * 60 * 60 * 24 * 7, // 1 week
      sameSite: "lax"
    },
    name: "session"
  };

  app.set("trust proxy", 1);
  app.use(session(sessionSettings));
  app.use(passport.initialize());
  app.use(passport.session());
  
}